@using FlagShip_Manager;
@using FlagShip_Manager.Objects;
@using FlagShip_Manager.Management_Server;
@using System.Text.RegularExpressions;
@using System.Timers
@inject IJSRuntime RunJS

@*
    Component for listing workers. 
    UI allows for shutting down, sleeping, and enabling or disabling specific render applications on a given worker.
*@

<style>
    .WorkerButtons {
        background: #595959;
        -webkit-text-fill-color: #E4E4E4;
        height: 25px;
        width: 60px;
        border-radius: 15px;
        font-size: 10px;
        align-items: center;
        margin-top:4px;
        margin-left: 1px;
        margin-right: 1px;
        position: relative;
        border:none;
        
    }    
    .WorkerButtons:hover {
        background: #737373;
    }
    .WorkerButtons:active{
        transition-duration: 0.1s;
        transition-property: all;
        background: #737370;
        height:23px;
        margin-left: 3px;
        margin-right: 3px;
        width:56px;
    }
    .WI_cell {
        position: relative;
        text-align: center;
        float: left;
        -webkit-text-fill-color: #E4E4E4;
        height: 35px;
        border-right:solid;
        border-bottom:solid;
        z-index: 20;
        transition-duration: 0.4s;
        transition-property: all;
    }
    .AppIconStatic{
        position:relative;
        top:1px;
        width: 30px; 
        
    }

    .GPUIconStatic {
        position: relative;
        top: 1px;
        width: 24px;
    }
    .LabelDrop{
        position:relative;
        margin-left:10px;
        margin-right:10px;
        white-space: nowrap;
        margin-top:3px;
        margin-bottom:3px;
        z-index: 25;
    }

    .AppIconAnimate{
        background-origin:content-box;
        position: static;
        padding-top:3px;
        width: 26px;
        transition-duration: 0.2s;
        transition-property: all;
    }
    .AppIconAnimate:hover{
        transition-duration: 0.4s;
        transition-property: all;
        position:static;
        cursor: pointer;
        animation:ease-in;
        padding-top: 0px;
        width:32px;
    }
    .AppIconAnimate:active{
        transition-duration: 0.1s;
        transition-property: all;
        padding-top: 3px;
        width:26px;
    }
    .ExpandingName{
        background-color: #424242;
        overflow: clip;
        position: absolute;
        width: 140px;
        z-index: 500;
        transition-duration: 0.4s;
        transition-property: all;
    }

</style>

<div id="jl1">
    @{
        BuildWOrkerList();
    }
    
    @foreach(Worker W in WorkerList){
        
        var labelID = W.ID + "l";
        var IDdouble = W.ID + "b";
        var statusID = W.ID + "s";
        RenderApp? Default = W.AvailableApps.Find(a => a.Default == true);
    
        <div style="background: #424242; width: 100%; height:32px; clear: both; z-index:0">

            <div id="@IDdouble" class="WI_cell" style=" width:150px; z-index:10;">
                <div id="@W.ID" class="ExpandingName" @onmouseover='() => JSFunctiion(W.ID, "ShowExtendedName")'  @onmouseout='() => JSFunctiion(W.ID, "HideExtendedName")'>
                    
                    <!--Worker Name-->

                    <label id='@labelID' class="LabelDrop" style="z-index:510">@W.name</label>
                </div> 
            </div>
            
            <div id="@statusID" class="WI_cell" style="width:100px; z-index:1;">

                <!--Status-->

                <label class="LabelDrop" style="z-index:1;">@WorkerStatus[W.Status]</label>
            </div>

            <div class="WI_cell" style="width:45px">
                @if (Default != null)
                {
                    <!--Master render type-->

                    <img class="AppIconStatic" src="@Default.ImagePath" />
                }
            </div>

            <div class="WI_cell" style="width:105px">
                <div style="position:relative; "></div>

                <div style="width:5px;"></div>
            
                @foreach (RenderApp app in W.AvailableApps)
                {
                    <!--Apps this worker is able to render with.-->

                    <div style="position:relative; float:left; width:33px; height:32px;">
                        @if (W.Status == 7)
                        {
                            <img class="AppIconStatic" style="opacity:50%;" src="@app.ImagePath" />
                        }
                        else{
                            <img class="AppIconAnimate" @onclick="() => app.EnableDisable()" src="@app.ImagePath" />
                        }
                    </div>
                }                                                                     
            </div>

            <div class="WI_cell" style="width:50px">

                <!--GPU Info-->

                <img class="GPUIconStatic" style="opacity:45%" src="@GetGPUStatusIcon(W.GPU)"/>
            </div>

            <div class="WI_cell" style="width:140px">
                
                <!--Control buttons-->
                
                @if (W.Status != 7){
                    <button class="WorkerButtons" @onclick="() => W.KillWorker()">Kill</button>
                    @if(W.Status != 3 )
                    {          
                        <button class="WorkerButtons" @onclick="() => W.SleepWorker()">Sleep</button>
                    }
                    else
                    {
                        <button class="WorkerButtons" @onclick="() => W.SleepWorker()">Wake</button>
                    }   
                }
            </div>
            
            <div class="WI_cell" style="width:120px">

                <!--Time since worker last updated-->

                <label class="LabelDrop">@SimplifedTime(W.lastSeen)</label>
            </div>

            <div class="WI_cell" style="width:834px; text-align:left; padding-left:2px;border-right:hidden;" >

                <!--Latest Log data-->

                <label class="LabelDrop">@W.LogBuffer</label>
            </div>
        </div>
    }
    
    <!--Extra padding line at bottom-->
    
    <div style="width:1520px; height:4px;"></div>
</div>
    
    



@code {
    private IJSObjectReference JS;

    [Parameter]
    public bool ShowOldWorkers { get; set; } = false;

    private bool LastOldWorkers = false;
    private Timer? time;
    private Worker[] WorkerList = new Worker[0];
    private int Count = 0;
    private int IgnoredWorkers = 0;

    Dictionary<int, string> WorkerStatus = new Dictionary<int, string>()
    {
        {0,"Idle" },
        {1,"Rendering" },
        {2, "Finished" },
        {3, "Asleep" },
        {4, "Failed" },
        {5, "Canceld" },
        {6, "Starting Up" },
        {7, "Offline" },
        {8, "Passive" }
    };

    protected override void OnAfterRender(bool firstRender)
    {
        //Protected after render method. 
        //starts timer on first render that calls OnTImeInterval

        if (firstRender)
        {
            time = new Timer();
            //Set the time interval.
            time.Interval = 200;
            time.Elapsed += OnTimeInterval;
            time.AutoReset = true;
            // Start the timer.
            time.Enabled = true;
        }
    }
    private async void OnTimeInterval(object sender, ElapsedEventArgs e)
    {
        //called on timer, every .2seconds.

        await InvokeAsync(() => StateHasChanged());
    }
    public string GetGPUStatusIcon(bool _GPU)
    {

        //Returns path to icon depending on if a worker is equiped with a >4GB GPU.

        if(_GPU){
            return @"Images\Status\Finished_whitey.png";
        }
        return @"Images\Status\Failed_whitey.png";

    }
    public string SimplifedTime(DateTime _lastSeen)
    {
        //Simplifies last seen time for better user readablility.

        if (_lastSeen.AddDays(1) < DateTime.Now)
        {
            return _lastSeen.ToString(@"MM/dd");
        }
        else if (_lastSeen.AddMinutes(1) < DateTime.Now)
        {
            return _lastSeen.ToString("hh:mm tt");
        }
        else
        {
            TimeSpan temp = DateTime.Now - _lastSeen;
            var tempRound = Math.Ceiling(temp.TotalSeconds);
            if (tempRound > 9) return $"{tempRound} seconds";
            else if (tempRound > 1) return $"{tempRound} seconds";
            else return "Now";
        }
    }
    internal string AdjustNameLength(string _Name)
    {
        //Adjusts worker name to fit within space constraints. 

        if (_Name.Length > 10)
        {
            return _Name.Substring(0, 10);
        }
        else return _Name;
    }
    internal async Task JSFunctiion(int _grid_ID, string _function)
    {
        //Calls JS function.

        JS = await RunJS.InvokeAsync<IJSObjectReference>("import", "./Components/Worker_List.razor.js");
        await JS.InvokeVoidAsync(_function, _grid_ID);
    }
    private void BuildWOrkerList()
    {
        //Builds a proxy List of workers used in the UI.

        if (Count > 50 || DB.workers.Count() != WorkerList.Length + IgnoredWorkers || LastOldWorkers != ShowOldWorkers)
        {
            IgnoredWorkers = 0;
            if (!ShowOldWorkers)
            {
                List<Worker> tempList = new List<Worker>();
                foreach(Worker w in DB.workers)
                {
                    if (w.lastSeen.AddDays(7) < DateTime.Now)
                    {
                        IgnoredWorkers++;
                        continue;
                    }
                    tempList.Add(w);
                }
                WorkerList = tempList.ToArray();
            }
            else
            {
                WorkerList = DB.workers.ToArray();
                IgnoredWorkers = 0;
            }
            Array.Sort(WorkerList, (a,b) => a.name.CompareTo(b.name));
            Count = 0;
        }else Count++;
        LastOldWorkers = ShowOldWorkers;
    }
}
