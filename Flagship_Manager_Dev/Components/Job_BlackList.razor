@using FlagShip_Manager.Objects
@using FlagShip_Manager.Helpers
@using FlagShip_Manager.Management_Server
@using FlagShip_Manager
<style>
    .BlackList {

        background: #404040;
        height: contain;
        min-height: 218px;
        max-height:218px;
        width: 184px;
        overflow-y: scroll;
    }
    .WorkerList {
        width: 178px;
        overflow-y: scroll;
        background: #404040;
        display: table;
    }
    

    .checkboxClass {
        display: none;
    }

    .label {
        background: #404040;
        position: relative;
        top: 1px;
        left: 1px;
        width: 20px;
        height: 20px;
        background-size: 18px;
        mask-image: url("Images/Icons/cropped X.png");
        mask-size: 18px;
        -webkit-mask-image: url("Images/Icons/cropped X.png");
        -webkit-mask-size: 18px;
        -webkit-mask-repeat: no-repeat;
        -ms-transform-origin-x: 9px;
        -ms-transform-origin-y: 9px;
        -webkit-transform-origin-x: 9px;
        -webkit-transform-origin-y: 9px;
        transition-duration: 0.4s;
        transition-property: all;
    }

    .checkboxClass:checked + .label {
        background: #E4E4E4;
        transform: rotate(45deg);
        -webkit-transform: rotate(45dg);
    }

    .CircleClass {
        background: #1E1E1E;
        width: 26px;
        height: 26px;
        position: relative;
        top:2px;
        left:2px;
        padding: 3px;
        border-radius: 15px;
        stroke-width: 2px;
        stroke: green;
        
        
    }
    .WorkerLabel{
        font-size:14px;
        position:relative;
        bottom:3px;
        padding-left:10px;
    }

</style>
@{
    var BLID = activeJob.ID + "BL";
}

<div id="@BLID" class="BlackList">
    <div class="WorkerList">
        @foreach (Worker w in DB.workers)
        {
            if (w.Status == 7 || !w.AvailableApps.Any((a) => a.AppName == activeJob.RenderApp)) continue;
            <div style="display:table-row; height:31px;">
                <div style="display:table-cell; width: 31px;">
                    <div class="CircleClass">
                        @if (activeJob.Status == 0 || activeJob.Status == 1 || activeJob.Status == 3)
                        {
                            <label>
                                @if (activeJob.WorkerBlackList.Contains(w.ID))
                                {
                                    <input class="checkboxClass" type="checkbox" id="@w.ID" checked @onclick="() => AddorRemoveFromBlackList(w.ID)">
                                }else{
                                    <input class="checkboxClass" type="checkbox" id="@w.ID" @onclick="() => AddorRemoveFromBlackList(w.ID)">
                                }
                                <div class="label"></div>
                            </label>
                        }
                        else
                        {
                            <label><div class="label" style="opacity:0;"></div></label>
                        }
                    </div>
                </div>

                <div style="display:table-cell; height:30px; vertical-align:central;">
                    @if (activeJob.WorkerBlackList.Contains(w.ID))
                    {
                        <label class="WorkerLabel" style="">@GetReducedName(w.name)</label>
                    }
                    else
                    {
                        <label class="WorkerLabel" style="-webkit-text-fill-color:white;">@GetReducedName(w.name)</label>
                    }
                </div>
            </div>
        }
    </div>
</div>



@code {

    [Parameter]
    public Job activeJob { get; set; }
    [Parameter]
    public string? renderApp { get; set; } = "";
    [Parameter]
    public EventCallback UpdateJob { get; set; }

    public void AddorRemoveFromBlackList(int _WID)
    {
        //Toggles weither a Job is allowed to render a Job.
        //Also calls cancel on any renderTasks currently being rendered by a newly blacklisted worker.

        if (activeJob.Status == 2 || activeJob.Status == 4 || activeJob.Status == 5) return;
        if (activeJob.WorkerBlackList.Contains(_WID))
        {
            //If Worker is already blacklisted then remove from blacklist.

            activeJob.WorkerBlackList.Remove(_WID);
            return;
        }
        foreach (renderTask t in activeJob.renderTasks)
        {
            if (t.taskLogs.WorkerIDs.Any(id => id == _WID) && t.Status != 2)
            {
                //Iterates though renderTasks to find if blacklisted worker is currently rendering.
                //If found Cancel request is called.

                try
                {
                    Worker w = t.Worker();
                    WorkerServer.cancelWorker(w, false, true);
                    t.taskLogs.WriteToWorker($"\n-------------------------------Worker Log end-------------------------------\n{w.name} Has been sent a cancel request.");
                    t.taskLogs.WriteToManager($"{w.name} Has been sent a cancel request. Task will restart with a new worker.");
                    t.taskFail("Worker added to black list.", true, true);
                    return;
                }
                catch
                {

                }
            }
        }
        if (!activeJob.WorkerBlackList.Contains(_WID)) activeJob.WorkerBlackList.Add(_WID);
        UpdateJob.InvokeAsync();
    }

    public static string GetReducedName(string _name)
    {
        //Reduces worker name length if its too long for the given space.

        if (_name.Length > 12)
        {
            string endBit = _name.Substring(_name.Length - 4, 4);
            string split = _name.Substring(0, 6) +"..."+ endBit;
            return split;
        }
        else return _name;
    }
}
