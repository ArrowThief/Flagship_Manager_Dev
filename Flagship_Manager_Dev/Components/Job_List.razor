@using FlagShip_Manager.Objects
@using FlagShip_Manager.Helpers
@using FlagShip_Manager.Management_Server
@using FlagShip_Manager
@using System.Text.RegularExpressions
@using System.Timers

@inject IJSRuntime RunJS
@*
    Job list Component. 
    Archive togle controls which job buttons apear.
*@


<style>

    .TableCell {

        position:relative;
        top:3px;
        text-align: center;
        float:left;
        -webkit-text-fill-color: #E4E4E4;
        height: 32px;
    }
    .CellLabel{
        position:relative; 
        top:4px;
    }

    .ProgressBarBorder {
        margin-top: 1px;
        align-content:center;
        text-align:center;
        float: left;
        background: #1E1E1E;
        width: 80px;
        height: 30px;
        border-radius: 5px;
    }

    .ProgressBarBorderRed {
        margin-top:1px;
        align-content: center;
        text-align: center;
        float:left;
        background: #520212;
        width: 80px;
        height: 30px;
        border-radius: 5px;
    }

    .pB {
        position: relative;
        top: 12px;
        left: 5px;
        background: #1E1E1E;
        width: 70px;
        height: 22px;
        border-radius: 3px;
    }

    .BlackListDropdown {
        display: none;
        width: 280px;
        position: relative;
        background: #1E1E1E;
        -webkit-text-fill-color: #E4E4E4;
        bottom: 30px;
    }

    .DropdownButton {
        text-align: left;
        width: 280px;
        -webkit-text-fill-color: #E4E4E4;
        background: #1E1E1E;
        height: 30px;
        text-align: center;
        position: sticky;
        top: 0;
    }

    input::-webkit-outer-spin-button,
    input::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    input[type=number] {
        -moz-appearance: textfield;
    }

    .textWhite {
        -webkit-text-fill-color: white;
    }

    .textYellow {
        -webkit-text-fill-color: yellow;
    }

    .test {
        position: absolute; 
        left: 0; 
        right: 0;
    }
    .ExpandButton{
        position:relative;
        bottom:2px;
        background-color:transparent;
        border-color:transparent;
    }
    .LogOpen{
        display:block;
    }
    .LogClosed{
        display:none;
    }
    .ActivePartentParent{
        max-height:0px;
        max-width:290px;
        position:relative;
        display: block;
        left:1204px;
        bottom:29px;
        
        
    }
    .ArchiveBatchParent{
        max-height:0px;
        max-width:290px;
        position:relative;
        
        left:1276px;
        bottom:29px;
        
    }
    .MinusDiv{

        max-width:60px;
        position:relative;
        left:60px;
        bottom:32px;
        
    }
    .BatchDivs {
        display:table-cell;
        border-radius: 15px;
        font-size: 10px;
        align-items: center;
        margin-left: 1px;
        margin-right: 1px;
    }
    .BatchSelectExpand{
        border-radius: 3px;
        position: absolute;
        top: auto;
        bottom: -22.5px;
        left: 316px;
        height: 25px;
        width: 25px;

    }

    .transparentButton {
        background-color: #595959;
        position: relative;
        top: 4px;
        width: 1550px;
        height: 20px;
        border: hidden;
        transition-property: all;
        transition-duration: 5s;
    }
</style>
@inject IJSRuntime JSRuntime
<!--Begin job header bar@ShowArchiveBatch;-->
@{
    UpdateLists();
    var ID = "jl2";
    if (!Archive) ID = "jl3";
}
<div id="@ID">
    @foreach(Job J in JobList)
    {
        try
        {
            <div >
                @{
                var CBID = J.ID + "CB";
                var PriorityID = J.ID + "Pri";
                var BarID = J.ID + "bar";
                var Arrow = J.ID + "arrow";
                }

                <div id="@BarID" style="background: #424242; width: 100%; height:32px; clear: both;" hidden=@hidden>
                    <div class="TableCell" style="margin-left:4px; width: 45px; background: @StatusColor[J.Status]; height:25px; border-radius:2px;"><img src=@StatusIcon[J.Status] style="opacity:.5; width:20px; position:relative; bottom:1px;" /> </div>
                    <div class="TableCell" style="width:50px"><button class="ExpandButton" @onclick="() => OpenPanel(J.ID)"><img style="transition:all; transition-duration:.2s" id="@Arrow" src="Images/arrow right.png" width="15" /></button></div>
                    <div style="width:45px; float:left; position:relative; top:1px; text-align: center;">
                        <img src=@apps[J.RenderApp.ToLower()] style="width:30px" />
                    </div>
                    <div class="TableCell" style="width: 400px;"> <label>@J.Name</label></div>
                    @if (J.Archive)
                    {
                        <div class="TableCell" style="width: 60px;">
                            <label id="@PriorityID" style="width:30px; text-align: center; background: none; border: hidden;">@J.Priority</label>
                        </div>
                    }
                    else
                    {
                        <div class="TableCell" style="width: 60px;">
                            <input type="number" id="@PriorityID" style="width:30px; text-align: center; background: none; border: hidden;"
                                    value="@J.Priority"
                            @onfocusin="()=> SelectPriority(PriorityID)"
                            @onkeypress="e => JSRemoveFocus(e, PriorityID)"
                            @onfocusout="()=> JSCheckValue(J)">
                        </div>
                    }
                    @if (J.ShotAlert)
                    {
                        <div class="ProgressBarBorderRed">
                            <div class="pB" style="background: @StatusColor[J.Status]; width: @GetProgressBarWidth(J.Progress)px;"></div>
                            <label style="-webkit-text-fill-color: #E4E4E4; position:relative; bottom:12px; left:1px;">@J.Progress%</label>
                        </div>
                    }
                    else
                    {
                        <div class="ProgressBarBorder">
                            <div class="pB" style="background: @StatusColor[J.Status];width: @GetProgressBarWidth(J.Progress)px;"></div>
                            <label style="-webkit-text-fill-color: #E4E4E4; position:relative; bottom:12px; left:1px;">@J.Progress%</label>
                        </div>
                    }
                    <div class="TableCell" style="width: 90px;">@J.CompletedFrames/@J.TotalFramesToRender</div>
                    <div class="TableCell" style="width: 80px;">@J.totalActiveTime.ToString(@"d\:hh\:mm")</div>
                    <div class="TableCell" style="width: 80px;">@J.RemainingTime.ToString(@"d\:hh\:mm")</div>

                    @if (Archive)
                    {
                        <div class="TableCell" style="width: 120px;">@J.ArchiveDate.ToString(@"MM/dd hh:mm")</div>
                    }
                    else
                    {
                        <div class="TableCell" style="width: 120px;">@J.CreationTime.ToString(@"MM/dd hh:mm")</div>
                    }
                    <div style=" width:140px; float:left; position:relative; top:1px; left:40px; text-align: left;">
                        <img style="opacity:.7;" src=@GetTypeIcon(J) width="20" />
                        <label style="font-size:14px; -webkit-text-fill-color: #E4E4E4;">@J.FileFormat</label>
                    </div>
                    <Job_Buttons UpdateList="UpdateList" CheckID="RemoveActiveChecked" _Status="J.Status" activeJob="J"></Job_Buttons>
                    <div class="TableCell" style="width:50px; position:relative; top:5px;">
                        <input id="@CBID" style="accent-color:#1E1E1E;" type="checkbox" @onchange="()=> AddorRemoveActiveChecked(J)" />
                    </div>

                </div>

                    
                <!--End Job header bar-->
                @{
                    var TaskDiv = J.ID + "H";
                    var TD = J.ID + "P";
                    var MaxA = J.ID + "MaxA";
                }

                <div id="@TaskDiv"  style="display:none; height:00px; overflow:hidden; transition-duration:.4s; transition-property:all;">
                    <div id="@TD" style="position:relative; bottom:272px; transition-duration:.4s; transition-property:all;">
                        <div style="width:1520px; height:4px;"></div>
                        <div style="width:100%; height: 25px; background: #595959;">
                            <label style="padding-left:1%; position:relative; top:2px; font-weight:800;">Tasks</label>
                            <label style="padding-left:64.5%; position:relative; top:2px; font-weight:800;">Worker Black List</label>
                            <label style="padding-left:3.5%; position:relative; top:2px; font-weight:800;">Meta Data</label>
                        </div>
                        <div style="display:inline-flex;">

                            <div>
                                <Job_TaskList UpdateJob="UpdateList" LogViewCall="OpenLogView" RenderTasks="@J.renderTasks.ToArray()" CreationTime="@J.CreationTime"></Job_TaskList>
                            </div>
                            <div>
                                <Job_BlackList UpdateJob="UpdateList" Status="@J.Status" GPUrequired="@J.GPU" JID="@J.ID" renderApp="@J.RenderApp" idBlackList="@J.WorkerBlackList" ShowButton="@J.finished"></Job_BlackList>
                            </div>
                            <div>
                                <Job_MetaData AverageFPS="@J.TimePerFrame" MachineHours="@J.MachineHours" JobID="@J.ID" GPU="@J.GPU" Overwrite="@J.Overwrite" OutputPath="@J.outputPath" Preset="@J.RenderPreset" ProjectPath="@J.WorkingProject" TempProjectPath="@J.Project"></Job_MetaData>
                            </div>
                        </div>
                        @if (J.renderTasks.Count() > 6)
                        {
                            <button class="transparentButton" @onclick="() => MaxamizeTasklist(J.ID,false)">
                                <img id="@MaxA" src="Images/arrow down.png" style="width:24px; position:relative; bottom: 4px; transition:all; transition-duration:.5s;" />
                            </button>
                        }
                        else
                        {
                            <button class="transparentButton" disabled>
                                <img id="@MaxA" src="Images/minus.png" style="width:24px; position:relative; bottom: 4px; transition:all; transition-duration:.5s;" />
                            </button>
                        }
                    </div>
                </div>
                <div style="width:1520px; height:4px;"></div>
                    
            
            </div>
        }catch{
            Console.WriteLine("Failed to draw job.");
        }
    }

</div>

    <div>
        @if (DoubleLog) {
        DoubleLog = false;
        }
        else if (LogTask != null) {
                <LogView _TaskLogs="@LogTask.taskLogs" CloseWindow="CloseLogView"></LogView>
        }

    </div>


@code {
    [Parameter]
    public bool Archive { get; set; } = false;
    [Parameter]
    public List<int> JobIDList { get; set; } = new List<int>();
    [Parameter]
    public EventCallback FullUpdate { get; set; }
    [Parameter]
    public EventCallback<Tuple<Job, bool>> CheckID { get; set; }

    Dictionary<string, string> apps = new Dictionary<string, string>()
    {
        {"ae",@"Images/App/AE.png"},               //AfterEffects Icon
        {"blender", @"Images/App/blender.png"},     //Blender Icon
        {"fusion", @"Images/App/fusion.png"}        //Fusion Icon
    };
    Dictionary<int, string> StatusIcon = new Dictionary<int, string>(){

        {0,"Images/Status/Queueue_whitey.png"},    //Queued
        {1, "Images/Status/Render_Whitey.png"},    //Rendering
        {2, "Images/Status/Finished_Whitey.png"},  //Finished
        {3, "Images/Status/Pause_whitey.png"},     //Paused
        {4, "Images/Status/Failed_whitey.png"},    //Failed
        {5, "Images/Status/Cancelled_whitey.png"}, //Cancelled
        {6, "Images/Status/Failed_whitey.png"}     //Failed
    };
    Dictionary<int, string> StatusColor = new Dictionary<int, string>()
    {
        {0,"#7E469E"},
        {1,"#547AB5"},
        {2,"#09B18A"},
        {3,"#C78753"},
        {4,"#C36670"},
        {5,"#595959"}

    };

    private IJSObjectReference JS;

    private List<int> CheckedIDs = new List<int>();
    private static List<Job> JobList = new List<Job>();

    private bool ShowActiveBatch = false;
    private bool ShowArchiveBatch = false;
    public bool hidden = false;
    private bool DoubleLog = false;

    public string backgroundStyle = "Background";
    private string BlackListActive = "none";
    public string OpenClosed = "hidden";

    private Timer? time2;
    public renderTask? LogTask = null;

    internal void UpdateLists()
    {
        //Updates the UI Job List with any changes from the DB Job List. 
        //Runs everytime the UI is renndered.

        List<Job> temp;
        List<int> remove;

        if (Archive){

            //Assigns temp variables to Archives

            temp = DB.archive;
            remove = DB.removeArchive;
        }
        else
        {
            //Assigns temp variables to Active

            temp = DB.active;
            remove = DB.removeActive;
        }

        for(int i = 0; i < remove.Count(); i++)
        {
            //Removes any Jobs in remove List

            int Index = DB.FindJobIndex(JobList, remove[i]);
            if (Index > -1) JobList.Remove(DB.FindJob(JobList, remove[i]));
            else Console.WriteLine("Failed to find Job Index");
        }

        //Clear remove list
        remove.Clear();

        if (JobList.Count() < temp.Count())
        {
            //Adds any new Jobs from The DB joblist to the UI Job list.

            for (int i = JobList.Count(); i < temp.Count(); i++)
            {
                JobList.Add(temp[i]);
            }
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        //Protected method for first render. 
        //Starts timer that calls method every second.

        if (firstRender)
        {
            BuildJS();
            time2 = new Timer();
            //Set the time interval.
            time2.Interval = 1000;
            time2.Elapsed += OnTimeInterval;
            time2.AutoReset = true;
            // Start the timer.
            time2.Enabled = true;
        }
    }
    private async void OnTimeInterval(object sender, ElapsedEventArgs e)
    {
        //Timer method, runs on time2 interval. 
        //Updates info on screen.

        await InvokeAsync(() => StateHasChanged());
    }
    public void Dispose()
    {
        // While navigating to other components, Dispose method will be called and clean up the Timer function.

        time2?.Dispose();
    }
    public async void UpdateList(){
        await FullUpdate.InvokeAsync();
        await InvokeAsync(() => StateHasChanged());
    }
    private async Task AddorRemoveActiveChecked(Job j)
    {
        //Adds or removes Job IDs from batch selected list.
        
        bool CheckValue = await JS.InvokeAsync<bool>("GetCheckboxValue", $"{j.ID}");
        await CheckID.InvokeAsync(new Tuple<Job, bool>(j,CheckValue));
    }
    private async Task RemoveActiveChecked(Job j)
    {
        //Removes Job IDs from batch selected list.

        await CheckID.InvokeAsync(new Tuple<Job, bool>(j, false));
    }
    protected void OpenLogView(renderTask _rT){

        //Displays log window with data from a renderTask.

        if(LogTask != null){
            DoubleLog = true;
            Thread.Sleep(100);
        }
        LogTask = _rT;
        InvokeAsync(() => StateHasChanged());
    }
    protected void CloseLogView(){

        //Hides log window.

        LogTask = null;
    }
    internal async Task BuildJS()
    {
        //Builds JS file info. 

        JS = await RunJS.InvokeAsync<IJSObjectReference>("import", "./Pages/DivGUI.razor.js");
    }
    internal async Task JSFunctiion(string _function = "", string arg1 = "", string arg2 = "")
    {
        //Simplified call for JS function.

        if (arg1 != "")//function has first arg
        {
            if (arg2 != "")//function has second args
            {
                await JS.InvokeVoidAsync(_function, arg1, arg2);
            }
            else//Only first arg
            {
                await JS.InvokeVoidAsync(_function, arg1);
            }
        }
        else //No args
        {
            await JS.InvokeVoidAsync(_function);
        }
    }
    public string GetAppIcon(string _appType)
    {
        //Returns the path to the correct App icon.

        return apps[_appType.ToLower()];
    }
    public string SimplifyTime(TimeSpan _time)
    {
        //Simplifes timespan to readable format.

        string _return = "";

        if (_time == TimeSpan.Zero) return "00:00";
        else if (_time.TotalHours > 24) return Math.Round(_time.TotalDays) + " Days";
        else _time.ToString(@"mm\:ss\.ff");

        return _return;
    }
    public string PauseButtonChange(int _status)
    {
        //Toggles between pause button and resume button

        if (_status == 3) return "Resume";
        else return "Pause";
    }
    public string GetTypeIcon(Job _j)
    {
        //Switches between video and image sequece icon

        if (_j.vid)
        {
            return "Images/Video White.png";
        }
        else
        {
            return "Images/Image Sequence White.png";
        }

    }
    private void OpenCloseBlacklist()
    {
        //Toggles blackList

        if (BlackListActive == "none")
        {
            BlackListActive = "block";
        }
        else
        {
            BlackListActive = "none";
        }
    }
    public void ArchiveJob(Job j)
    {
        //Moves job to Archive List

        if (!j.finished) WebButtons.CancelJob(j);
        DB.AddToArchive(j);

        try
        {
            DB.UpdateDBFile = true;
        }
        catch (Exception EX)
        {
            Console.WriteLine("ERROR: " + EX);
        }
    }
    internal async Task JSRemoveFocus(KeyboardEventArgs e, string _ID)
    {
        //Removes focus from HTML element. 

        if (e.Key == "Enter")
        {
            await JS.InvokeVoidAsync("removeFocus", _ID);
        }
    }
    public double GetProgressBarWidth(double _num)
    {
        //Adjusts the width of the progress bar depending on completion.

        return (_num * 7) / 10;
    }
    internal async Task SelectPriority(string _ID)
    {
        //Selects Piriority text on click.

        await JS.InvokeVoidAsync("SelectPriorityValue", _ID);
    }
    internal async void OpenPanel(int _ID)
    {
        //Expands renderTask List.

        if (Archive) await JS.InvokeVoidAsync("expandTaskList", _ID, "2");
        else await JS.InvokeVoidAsync("expandTaskList", _ID, "3");
    }
    public async void MaxamizeTasklist(int _ID, bool colapse) 
    {
        //Adjusts renderTask List height.
        //If 7 tasks or greater are in list then list will grow. Else this cannot be called. 
    
        if (Archive) await JS.InvokeVoidAsync("maximizeTaskList", _ID, "2");
        else await JS.InvokeVoidAsync("maximizeTaskList", _ID, "3");
    }
    internal async Task JSCheckValue(Job _J)
    {
        //Checks if entered Priority value is within range.
        //Returns cheeky message in JS console if silly numbers are called. 

        _J.Priority = await JS.InvokeAsync<int>("CheckValue",_J.ID, _J.Priority);
    }
}
