@using FlagShip_Manager.Objects
@using System.Timers
@using Flagship_Manager_Dev.Objects;
@implements IDisposable

@page "/LogView"
<style>
.TextBox{
    width:800px; 
    height:800px; 
    background:black; 
    border-radius:5px; 
    -webkit-text-fill-color: white;
    position:fixed;
    float:initial;
    top: 15%;
    left: 50%;
    margin: 200px 0 0 -400px;
    z-index:9999999999;
    opacity: 75%;
    white-space: pre-wrap;
}

.SwapButton {
    position: absolute;
    left: 83%;
    background: black;
}
.CloseButton{
    position:absolute;
    left:97%;
    background:black;
    
    
}
.Index{
    top:2px;
    height:26px;
    background: #424242;
    border: hidden;

}
#TitleBar{
    width: 100%;
    height: 30px;
    display: table-row;
}
</style>

<div class="TextBox">
    <div id="TitleBar">
        <label style="display:table-cell;">Log View</label>
        @*<input type="number" class="Index" @bind-value="CurrentIndex" @onkeydown="@Enter">*@
        
        @for (int Count = 1; Count < 10; Count++)
        {
            
            int current = Count;
            
                @if (current > _TaskLogs.Attempt(false))
                {
                @*<div style="display:table-cell; width:50px; height:5px; color:green;"></div>*@
                }
                else{
                    <div style="display:table-cell; width:5px;"></div>
                    <button type="button" class="Index" @onclick="() => ChangeLog(current-1)">@current</button>

                }
            
        }
        @*<div style="display:table-cell; width:69.65%;"></div>*@
        <button class="SwapButton" @onclick="() => SwapLogs()">@LogString</button>
        <button class="CloseButton" @onclick="() => Close()">X</button>
    </div>
    
    <div style="overflow-y: scroll; height: 96%; width: 800px; position: relative; bottom: 9%;">
        @if(LogSwap){
            @if (CurrentIndex > -1 && CurrentIndex < 5 && _TaskLogs.WorkerLog != null)
            {
                <label>@_TaskLogs.WorkerLog[CurrentIndex]</label>
            }
            else 
            {
                ApplyNumber();
            }
        }else{
            @if (CurrentIndex > -1 && CurrentIndex < 5 && _TaskLogs.ManagerLog != null)
            {
                <label>@_TaskLogs.ManagerLog[CurrentIndex]</label>
            }
            else
            {
                ApplyNumber();
            }
        }
    </div>
    
</div>
@code {
    private int numValue = 0;
    private int currentCount = 0;
    private Timer? time;
    private int CurrentIndex = -1;
    private bool LogSwap = true;
    private string LogString = "Worker Log   ";
    //private bool open = true;
    //private bool deslect = false;
    //InputNumber<int> inputTest;
    //[Parameter]
    //public renderTask? LogTask { get; set; } = new renderTask();

    //[Parameter]
    // EventCallback<bool> CloseBool { get; set; }
    //[Parameter]
    //public List<string> WorkerLogs { get; set; }
    //[Parameter]
    //public List<string> MangerLogs { get; set; }
    //[Parameter]
    //public bool open { get; set; }
    //[Parameter]
    //public int TaskAttempts { get; set; } = 0;
    [Parameter]
    public TaskLogs _TaskLogs {get; set;}
    [Parameter]
    public EventCallback CloseWindow { get; set; }
    public void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {

        }
    }

    //private string DefaultLogState()
    //{
    //    if (Logs[LogTask.attempt] == "") return "No log data.";
    //    else return LogTask.Log[LogTask.attempt];
    //}
    private async Task Close(){

        await CloseWindow.InvokeAsync();
        //DivJobUI.LogDisplay = "none";
        //return CloseBool.InvokeAsync(false);
    }
    private void IncrementCount(){
        currentCount++;
    }
    protected override void OnAfterRender(bool firstRender){
        if (firstRender)
        {
            //CurrentIndex = WorkerLogs.Count() -1;
            InvokeAsync(() => StateHasChanged());
            time = new Timer();
            //Set the time interval.
            time.Interval = 1000;
            time.Elapsed += OnTimeInterval;
            time.AutoReset = true;
            // Start the timer.
            time.Enabled = true;
        }


        base.OnAfterRender(firstRender);
    }
    private async void OnTimeInterval(object sender, ElapsedEventArgs e){
        IncrementCount();
        await InvokeAsync(() => StateHasChanged());
    }
    public void Dispose(){
        // While navigating to other components, Dispose method will be called and clean up the Timer function.
        time?.Dispose();
    }
    public void ApplyNumber()
    {

        if (CurrentIndex > _TaskLogs.Attempt() || CurrentIndex < 0)
        {
            CurrentIndex = _TaskLogs.Attempt();
        }
        else 
        {
            CurrentIndex = numValue;
        }
    }
    public void ChangeLog(int _Index){
        CurrentIndex = _Index;
    }
    public void SwapLogs() {
        LogSwap = !LogSwap;
        if (LogSwap) LogString = "Worker Log   ";
        else LogString = "Manager Log";
    }
}
