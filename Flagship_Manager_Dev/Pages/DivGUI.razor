@page "/DivGUI"
@using System.Timers
@using FlagShip_Manager.Objects
@using FlagShip_Manager
@using FlagShip_Manager.Helpers
@using Flagship_Manager_Dev.Components
@using FlagShip_Manager.Management_Server
@inject IJSRuntime RunJS
@*
    Main GUI page for flagship
*@

<style>
    ::-webkit-scrollbar {
        scroll-behavior: smooth;
        width: 6px;
    }

    ::-webkit-scrollbar-thumb {
        background-color: #2D2D2D;
        border-left: 1px solid #424242;
        border-right: 1px solid #424242;
        border-radius: 2px;

    }

    ::-webkit-scrollbar-track {
        background-color: #424242;
        border-radius: 0px;
    }

    .Worker_List_Bar {
        position:relative;
        z-index: 300;
        width: 1550px;
        height: 35px;
        background: #595959;
        text-align: center;
        padding: 7px;
    }
    .headerClass {

        position:center;
        float: left;
        margin-top:6px;
        -webkit-text-fill-color: #E4E4E4;
        font-family:Roboto;
        font-size:16px;
        font-weight:500;
        background: #1E1E1E;
        text-align: center;
    }
    .firstheaderClass {
        float: left;
        position: inherit;
        margin-left:4px;
        margin-top: 6px;
        -webkit-text-fill-color: #E4E4E4;
        font-family: Roboto;
        font-size: 16px;
        font-weight: 500;
        background: #1E1E1E;
        text-align: center;
    }

    .Background {
        transition-duration: 0.5s;
        transition-property: all;
        background: #1E1E1E;
        width: 1550px;
        border-radius: 0px;
    }
    .QueueBarOpen {
        position: relative;
        z-index: 300;
        width: 1550px;
        height: 35px;
        background: #595959;
        text-align: center;
        padding: 7px;
    }
    .ArchiveBar {
        position: relative;
        z-index: 300;
        width: 1550px;
        height: 35px;
        background: #595959;
        text-align: center;
        padding: 7px;
    }
    .sort-link {
        cursor: pointer;
    }
    .MinusButtons {
        position:relative;
        bottom:1px;
        background: #1E1E1E;
        -webkit-text-fill-color: #E4E4E4;
        height: 25px;
        width: 70px;
        font-size: 10px;
        align-items: center;
    }
    .BatchButtonsColor{
        background: #262626;
        border: solid;
        border-width:2px;

        border-color: #595959;
        -webkit-text-fill-color: #E4E4E4;
    }
    .BatchButtonsColor:hover{
        background: #4d4d4d
    }
    .BatchButtons {

        height: 25px;
        width: 70px;
        border-radius: 15px;
        font-size: 10px;
        align-items: center;
        margin-left: 1px;
        margin-right: 1px;
        position: relative;
        bottom: 1.5px;
    }

    .BatchButtons:active {
        transition-duration: 0.1s;
        transition-property: all;
        background: #737370;
        height: 23px;
        margin-left: 2px;
        margin-right: 2px;
        width: 68px;
    }
    
    .MiniJobButtons {
        display:table-cell;
        background: #262626;
        border: solid;
        border-color: #595959;
        border-width: 2px;
        -webkit-text-fill-color: #E4E4E4;
        height: 25px;
        width: 34px;
        border-radius: 15px;
        font-size: 10px;
        align-items: center;
        position: relative;
        bottom: 1.5px;
    }

    .MiniJobButtons:active {
        background: #4d4d4d; 
        height: 24px;
        width: 32px;
        border-radius: 15px;
        margin-left: 1px;
        margin-right: 1px;
    }
    .MiniJobButtons:hover{
            background: #4d4d4d
    }

    .barButtons{
        border:hidden;
        background: #595959;
        width: inherit;
        height: inherit;
        position: relative;
        bottom: 6px;
        right: 6px;
    }
    
    .ActiveBatchMenu{
        position:relative;
        left:1555px; 
        height:150px; 
        width:40px;
    }
    
    .fade-in {
    animation: fadeIn .2s;
    
    }
    .infoPanel{
        z-index:5000;
        display:none;
        position:absolute;
        top:50%;
        left:50%;
        transform: translate(-50%, -50%);
        height:330px;
        width:600px;
        background: #595959;
    }

    .hover_Pointer:hover{
      cursor: pointer;  
    }
    .InfoText{
        font-family:Roboto;
        padding-left:10px;
        -webkit-text-fill-color: #E4E4E4;
        line-height:12pt;
    }
    .Animate{
        transition-duration: .2s;
        transition-property: all;
        transition-timing-function: linear;
    }
    
</style>
@{
}<div style="overflow:clip; height:auto; width:1600px;">
    <div style="display:block;background-color:#1E1E1E; width:1550px; height:110px;">
        <img style="width:380px;" src="/Images/Flagship_Header_Logo-White.png" />
        <div class="hover_Pointer" @onclick='() => JSFunctiion("OpenInfo","4")' style="background:white; height:30px; width:30px; position:relative; left:1500px; bottom:55px; border-radius:15px; text-align:center;">
            <p style=" line-height:30px; font-family:'Times New Roman'; font-weight:bold; font-style:italic;  font-size:28px; ">i</p>
        </div>
    </div>

    <button id="1b" class="Worker_List_Bar Animate" @onclick='() => OpenCloseList("1")'>Worker List: @CountOnlineWorkers()</button>
    <div id="1h" class="Animate" style="overflow:hidden; height:0px;">
        <div id="1p" class="Animate" style="position:relative; bottom:@WL_StartHeight;">
            <!--List position, control with bottom-->
            <div style="display:block; -webkit-text-fill-color:#E4E4E4; background:#1E1E1E; width:1550px; height: 36px;">
                <!--Header goes here-->
                <div class="headerClass sort-link" style="width:150px">Worker Name</div>
                <div class="headerClass sort-link" style="width:100px">Status</div>
                <div class="headerClass sort-link" style="width:50px">Main</div>
                <div class="headerClass sort-link" style="width:100px;">Render Apps</div>
                <div class="headerClass sort-link" style="width:50px">GPU</div>
                <div class="headerClass sort-link" style="width:140px">Buttons</div>
                <div class="headerClass sort-link" style="width:120px">Last Seen</div>
                <div class="headerClass sort-link" style="width:840px">Log</div>
            </div>

            <div class="Background" style="height:auto;">
                <!--Worker List-->
                <Worker_List></Worker_List>
            </div>
        </div>
    </div>

    <button id="2b" class="ArchiveBar Animate" style="" @onclick='() =>  OpenCloseList("2")'>Archive: @DB.archive.Count()</button>
    <div id="2h" class="Animate" style="overflow:hidden; display:block; height:0px;">
        <!--List height-->
        <div id="2p" class="Animate" style="position:relative; bottom:@AR_StartHeight;">
            <!--List position, control with bottom-->
            <div style=" display:block; -webkit-text-fill-color: #E4E4E4; background:#1E1E1E; width:1550px; height: 36px;">
                <!--Header goes here-->
                <div class="firstheaderClass sort-link" style="width:45px" @onclick="() => listSort(true,0)">Status</div>
                <div class="headerClass sort-link" style="width:50px"></div>
                <div class="headerClass sort-link" style="width:45px" @onclick="() => listSort(true,1)">App</div>
                <div class="headerClass sort-link" style="width:400px;" @onclick="() => listSort(true,2)">Shot Name</div>
                <div class="headerClass sort-link" style="width:60px" @onclick="() => listSort(true,3)">Priority</div>
                <div class="headerClass sort-link" style="width:80px" @onclick="() => listSort(true,4)">Progress</div>
                <div class="headerClass sort-link" style="width:90px" @onclick="() => listSort(true,5)">Frames</div>
                <div class="headerClass sort-link" style="width:80px" @onclick="() => listSort(true,6)">Active</div>
                <div class="headerClass sort-link" style="width:80px" @onclick="() => listSort(true,7)">Remaining</div>
                <div class="headerClass sort-link" style="width:120px" @onclick=" ()=> listSort(true,-1)">Archive Time</div>
                <div class="headerClass sort-link" style="width:140px" @onclick=" ()=> listSort(true,8)">Format</div>
                <div class="headerClass" style="width:80px;"></div>
                <div id="21" class="headerClass" style="opacity:0;">
                    <div class="BatchDivs"><button class="BatchButtons BatchButtonsColor" @onclick="() => RunBatchAction(8, true)">Re-Queue</button></div>
                    <div class="BatchDivs"><button class="BatchButtons BatchButtonsColor" @onclick="() => RunBatchAction(4, true)">Restart</button></div>
                    <div class="BatchDivs"><button class="BatchButtons BatchButtonsColor" @onclick="() => RunBatchAction(7, true)">Delete</button></div>
                </div>
                <div class="headerClass">
                    <input id="2cb" type="checkbox" style="width:52px;" @onchange='(e) => SelectAllJobs(e, true)' />
                </div>
            </div>

            <div class="Background" style=" display:block;">
                <!--Archive Job list-->
                <Job_List @ref="archive" FullUpdate="UpdateAll" Archive="true"></Job_List>
               
            </div>
        </div>
    </div>
        
    <button id="3b" class="QueueBarOpen Animate" @onclick='() => OpenCloseList("3")'>Active Queue: @DB.active.Count()</button>

    <div id="3h" class="Animate" style="overflow:hidden; display:block; height:0px;">
        <div id="3p" class="Animate" style="position:relative; bottom:@AQ_StartHeight;">
            <div style="display:block; -webkit-text-fill-color: #E4E4E4; background:#1E1E1E; width:1550px; height: 36px;">
                <!--Header goes here-->
                <div class="firstheaderClass sort-link" style="width:45px" @onclick="() => listSort(false, 0)">Status</div>
                <div class="headerClass sort-link" style="width:50px"></div>
                <div class="headerClass sort-link" style="width:45px" @onclick="() => listSort(false,1)">App</div>
                <div class="headerClass sort-link" style="width:400px;" @onclick="() => listSort(false, 2)">Shot Name</div>
                <div class="headerClass sort-link" style="width:60px" @onclick="() => listSort(false,3)">Priority</div>
                <div class="headerClass sort-link" style="width:80px" @onclick="() => listSort(false,4)">Progress</div>
                <div class="headerClass sort-link" style="width:90px" @onclick="() =>listSort(false,5)">Frames</div>
                <div class="headerClass sort-link" style="width:80px" @onclick="() => listSort(false,6)">Active</div>
                <div class="headerClass sort-link" style="width:80px" @onclick="() => listSort(false,7)">Remaining</div>
                <div class="headerClass sort-link" style="width:120px" @onclick=" ()=> listSort(false,-1)">Submit Time</div>
                <div class="headerClass sort-link" style="width:140px" @onclick=" ()=> listSort(false,8)">Format</div>
                <div class="headerClass" style="width:10px;"></div>
                <div id="31" class="headerClass" style="opacity:0;">
                    <div class="BatchDivs"><button class="BatchButtons BatchButtonsColor" @onclick="() => RunBatchAction(1)">Cancel</button></div>
                    <div class="BatchDivs">
                        <button class="MiniJobButtons" @onclick="() => RunBatchAction(2)"><img style="width:15px; position:relative; bottom:1px;" src="Images/Status/Pause.png" /></button>
                        <button class="MiniJobButtons" @onclick="() => RunBatchAction(6)"><img style="width:15px; position:relative; bottom:1px;" src="Images/Status/Render.png" /></button>
                    </div>
                    <div class="BatchDivs"><button class="BatchButtons BatchButtonsColor" @onclick="() => RunBatchAction(3)">Restart</button></div>
                    <div class="BatchDivs"><button class="BatchButtons BatchButtonsColor" @onclick="() => RunBatchAction(5)">Archive</button></div>
                </div>
                <div class="headerClass">
                    <div style="width:52px;"></div>
                    <input id="3cb" type="checkbox" @onchange='(e) => SelectAllJobs(e, false)' />
                </div>
            </div>
            <div class="Background" style="display:block; height:auto;">
                <!--Active Job list-->
                <Job_List @ref="active" FullUpdate="UpdateAll" Archive="false"></Job_List>
            </div>
        </div>
    </div>

    <div id="4" class="infoPanel">
        <button @onclick='() => JSFunctiion("OpenInfo","4")' style="float:right; width:20px; height:20px; text-align:center;"><p style="position:relative; bottom:6px; right:3px;">X</p></button>
        <p class="InfoText" style="text-align:center; line-height:30pt; top:30px;">Flagship Render Manager</p>
        <p class="InfoText">Version: 0.86 - Beta</p>
        <p class="InfoText">Command Path: @jobManager.ActiveSettings.CtlFolder</p>
        <p class="InfoText" style="line-height:30pt;">Credits:</p>
        <p class="InfoText">Coding by: Nick Siebold</p>
        <p class="InfoText">Graphics by: Dustin Solomon and Jesse Daniel</p>
        <p class="InfoText">QA testing by: Janna Daniel</p>
        <p class="InfoText">Contact: IT@mutinyfx.com</p>
        <p class="InfoText"></p>
        <input class="InfoText" type="checkbox" style="background-color:green;" @bind-value="viewDebug" />Show Debug options
    </div>

    @if(viewDebug)
    {
        <div>
            <label style="color:white;">Worker Debug Menu:</label>
            <button @onclick="() => FSDebug.AddDummyWorker()">Add Dummy Worker</button>
            <button @onclick="() => FSDebug.AddLongDummyWorker()">Add Long Dummy Worker</button>
            <button @onclick="() => FSDebug.ClearrDummyWorkers()">Clear all Dummies</button>
        </div>
    }
</div>
@{
    UpdateHeights();
}

@code 
{
    private bool viewDebug = false;
    private string WL_StartHeight = (DB.workers.Count() * 36 + 36) + "px";
    private string AR_StartHeight = (DB.archive.Count() * 36 + 36) + "px";
    private string AQ_StartHeight = (DB.active.Count() * 36 + 36) + "px";

    private bool wOpen = false;
    private bool arOpen = false;
    private bool acOpen = false;
    private int JSFail = 0;
    private int SortIndex = 2;
    private int NotFail = 0;

    private Job_List active { get; set; }

    private Job_List archive { get; set; }

    private Timer time = new Timer();

    public IJSObjectReference JS;

    protected async override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            await BuildJS();
            time.Interval = 200;
            time.Elapsed += OnTimeInterval;
            time.AutoReset = true;
            // Start the timer.
            time.Enabled = true;
        }
    }
    private void UpdateHeights()
    {
        try
        {
            //JS.InvokeVoidAsync("UpdateWorkerList", wOpen);
            JS.InvokeVoidAsync("CheckHeight", wOpen, arOpen, acOpen);

        }
        catch
        {
            Console.WriteLine("Couldn't update list heights");
        }
    }
    private async void OnTimeInterval(object sender, ElapsedEventArgs e)
    {
        //runs on timer interval. Every .5seconds
        //Updates UI with new information.
        //Counts Javascript fails, if JS fails more than 10 times the JS thread will be assumed bad and be disposed. 
        //Every 10 seconds the JS error counnter will be reduced by 1.

        if (JSFail > 0)
        {
            NotFail++;
            if(NotFail >= 200){
                JSFail--;
                NotFail = 0;
            }
        }
        await InvokeAsync(() => StateHasChanged());
    }
    public void Dispose()
    {
        // While navigating to other components, Dispose method will be called and clean up the Timer function.

        time?.Dispose();
    }
    public async void UpdateAll(){

        //Updates all lists and list heights.

        await JSFunctiion("UpdateListHeights");
        await InvokeAsync(() => StateHasChanged());
    }
    public static int CountOnlineWorkers(){
        int Online = 0;
        foreach(Worker W in DB.workers){
            if (W.Status != 7) Online++;
        }
        return Online;
    }
    internal async Task JSFunctiion(string _function = "", string arg1 = "", string arg2 = "")
    {
        //Simplified JS call.

        try
        {
            if (arg1 != "")//function has first arg
            {
                if (arg2 != "")//function has second args
                {
                    await JS.InvokeVoidAsync(_function, arg1, arg2);
                }
                else//Only first arg
                {
                    await JS.InvokeVoidAsync(_function, arg1);
                }
            }
            else //No args
            {
                await JS.InvokeVoidAsync(_function);
            }
        }
        catch (Exception Ex)
        {
            JSFail++;
            if (JSFail > 10)
            {
                Console.WriteLine($"JS error disposing page.\nCurrent function call: {_function}\n\n{Ex}");
                Dispose();
            }
        }
    }
    internal async Task BuildJS()
    {
        //Builds JS object. 

        try
        {
            JS = await RunJS.InvokeAsync<IJSObjectReference>("import", "./Pages/DivGUI.razor.js");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Failed to define JS\n" + ex);
        }
    }
    internal async Task SelectAllJobs(ChangeEventArgs eve, bool _archive = false)
    {
        //Selects or deslects all jobs in list.
        if (_archive)
        {
            archive.SelectAll(bool.Parse(eve.Value.ToString()));
        }
        else
        {
            active.SelectAll(bool.Parse(eve.Value.ToString()));
        }
        InvokeAsync(() => StateHasChanged());
    }
    internal async Task RunBatchAction(int _action, bool _archive = false)
    {
        //Runs batch action on all select jobs

        if (_archive)
        {
            archive.BatchAction(_action);

        }
        else
        {
            active.BatchAction(_action);
        }

        InvokeAsync(() => StateHasChanged());



    }
    internal async Task OpenCloseList(string _ListID)
    {
        //Toggles lists open or closed.
        //TODO: Replace string with Tuple

        string temp = "";
        string[] At = new string[0];
        try
        {
            if (_ListID == "1")
            {

                int[] IDArray = new int[DB.workers.Count()];
                for (int i = 0; i < DB.workers.Count(); i++) IDArray[i] = DB.workers[i].ID;
                temp = await JS.InvokeAsync<string>("OpenCloseLists", _ListID, IDArray);
                At = temp.Split(",");
                wOpen = bool.Parse(At[0]);
            }
            else if (_ListID == "2")
            {
                int[] IDArray = new int[DB.archive.Count()];
                for (int i = 0; i < DB.archive.Count(); i++) IDArray[i] = DB.archive[i].ID;
                temp = await JS.InvokeAsync<string>("OpenCloseLists", _ListID, IDArray);
                At = temp.Split(",");
                arOpen = bool.Parse(At[0]);
            }
            else if (_ListID == "3")
            {
                int[] IDArray = new int[DB.active.Count()];
                for (int i = 0; i < DB.active.Count(); i++) IDArray[i] = DB.active[i].ID;
                temp = await JS.InvokeAsync<string>("OpenCloseLists", _ListID, IDArray);
                At = temp.Split(",");
                acOpen = bool.Parse(At[0]);
            }
        }
        catch(Exception Ex) 
        {
            Console.WriteLine($"Open Close list failed. \nERROR: \n\n{Ex}");
        }
    }
    internal void listSort(bool archiveList, int Index = -1)
    {
        //Sorts lists

        if (archiveList)
        {
            archive.Sort(Index, true);
        }
        else
        {
            active.Sort(Index, false);
        }
    }
}
